---
- name: Load br_netfilter module
  command: modprobe br_netfilter

- name: Add the br_netfilter module to work across reboot
  shell: |
    echo br_netfilter > /etc/modules-load.d/br_netfilter.conf  

- name: Enable the bridge-nf-call-iptables and ipv4.ip_forward
  sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: yes  
    state: present
    reload: yes  
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward

- name: Configure the yum repo for kubernetes
  copy:
    src: "{{ role_path }}/files/{{ item }}"
    dest: /etc/yum.repos.d/{{ item }}
    owner: root
    group: root
    mode: '0644'
  with_items:
    - kubernetes.repo
    - crio-stable.repo

- name: Install Kubernetes binaries
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - cri-o-1.24.4
    - kubelet-1.26.3
    - kubeadm-1.26.3
    - kubectl-1.26.3

- name: Enable the crio & kubelet service
  systemd:
    name: "{{ item }}"
    enabled: yes  
  with_items:
    - crio
    - kubelet

- name: Start the cri-o service
  systemd:
    name: "{{ item }}"
    state: started
  with_items:
    - crio

- name: Initialize the kubernetes cluster
  command: kubeadm init --apiserver-advertise-address="{{ k8s_master_ip }}" --apiserver-cert-extra-sans="{{ k8s_master_ip }}"  --node-name k8s-master --pod-network-cidr="{{ pod_network }}"  
      
- name: Generate the kubernetes cluster access
  shell: |
    mkdir -p $HOME/.kube
    sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config     

- name: Install Calico Operator
  command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml

- name: Configure the Calico resources
  command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml

- name: Get the token for joining the worker nodes
  shell: kubeadm token create  --print-join-command
  register: node_join_command

- debug:
    msg: "{{ node_join_command.stdout }}"

- name: Copy join command to ansible server
  local_action: copy content="{{ node_join_command.stdout_lines[0] }}" dest="/tmp/node_join_command" mode=0755
